{"/home/travis/build/npmtest/node-npmtest-koa-session/test.js":"/* istanbul instrument in package npmtest_koa_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-koa-session/lib.npmtest_koa_session.js":"/* istanbul instrument in package npmtest_koa_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_koa_session = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_koa_session = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-koa-session/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-koa-session && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_koa_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_koa_session\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_koa_session.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_koa_session.rollup.js'] =\n            local.assetsDict['/assets.npmtest_koa_session.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_koa_session.__dirname + '/lib.npmtest_koa_session.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-koa-session/node_modules/koa-session/index.js":"'use strict';\n\nconst debug = require('debug')('koa-session');\nconst ContextSession = require('./lib/context');\nconst util = require('./lib/util');\nconst assert = require('assert');\n\nconst CONTEXT_SESSION = Symbol('context#contextSession');\nconst _CONTEXT_SESSION = Symbol('context#_contextSession');\n\n/**\n * Initialize session middleware with `opts`:\n *\n * - `key` session cookie name [\"koa:sess\"]\n * - all other options are passed as cookie options\n *\n * @param {Object} [opts]\n * @param {Application} app, koa application instance\n * @api public\n */\n\nmodule.exports = function(opts, app) {\n  // session(app[, opts])\n  if (opts && typeof opts.use === 'function') {\n    const tmp = app;\n    app = opts;\n    opts = tmp;\n  }\n  // app required\n  if (!app || typeof app.use !== 'function') {\n    throw new TypeError('app instance required: `session(opts, app)`');\n  }\n\n  opts = formatOpts(opts);\n  extendContext(app.context, opts);\n\n  return async function session(ctx, next) {\n    const sess = ctx[CONTEXT_SESSION];\n    if (sess.store) await sess.initFromExternal();\n    try {\n      await next();\n    } catch (err) {\n      throw err;\n    } finally {\n      await sess.commit();\n    }\n  };\n};\n\n/**\n * format and check session options\n * @param  {Object} opts session options\n * @return {Object} new session options\n *\n * @api private\n */\n\nfunction formatOpts(opts) {\n  opts = opts || {};\n  // key\n  opts.key = opts.key || 'koa:sess';\n\n  // back-compat maxage\n  if (!('maxAge' in opts)) opts.maxAge = opts.maxage;\n\n  // defaults\n  if (opts.overwrite == null) opts.overwrite = true;\n  if (opts.httpOnly == null) opts.httpOnly = true;\n  if (opts.signed == null) opts.signed = true;\n\n  debug('session options %j', opts);\n\n  // setup encoding/decoding\n  if (typeof opts.encode !== 'function') {\n    opts.encode = util.encode;\n  }\n  if (typeof opts.decode !== 'function') {\n    opts.decode = util.decode;\n  }\n\n  if (opts.store) {\n    assert(typeof opts.store.get === 'function', 'store.get must be function');\n    assert(typeof opts.store.set === 'function', 'store.set must be function');\n    assert(typeof opts.store.destroy === 'function', 'store.destroy must be function');\n  }\n\n  return opts;\n}\n\n/**\n * extend context prototype, add session properties\n *\n * @param  {Object} context koa's context prototype\n * @param  {Object} opts session options\n *\n * @api private\n */\n\nfunction extendContext(context, opts) {\n  Object.defineProperties(context, {\n    [CONTEXT_SESSION]: {\n      get() {\n        if (this[_CONTEXT_SESSION]) return this[_CONTEXT_SESSION];\n        this[_CONTEXT_SESSION] = new ContextSession(this, opts);\n        return this[_CONTEXT_SESSION];\n      },\n    },\n    session: {\n      get() {\n        return this[CONTEXT_SESSION].get();\n      },\n      set(val) {\n        this[CONTEXT_SESSION].set(val);\n      },\n      configurable: true,\n    },\n    sessionOptions: {\n      get() {\n        return this[CONTEXT_SESSION].opts;\n      },\n    },\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-koa-session/node_modules/koa-session/lib/context.js":"'use strict';\n\nconst debug = require('debug')('koa-session:context');\nconst Session = require('./session');\nconst uid = require('uid-safe');\nconst util = require('./util');\n\nconst ONE_DAY = 24 * 60 * 60 * 1000;\n\nclass ContextSession {\n  /**\n   * context session constructor\n   * @api public\n   */\n\n  constructor(ctx, opts) {\n    this.ctx = ctx;\n    this.opts = Object.assign({}, opts);\n    this.store = this.opts.store;\n  }\n\n  /**\n   * internal logic of `ctx.session`\n   * @return {Session} session object\n   *\n   * @api public\n   */\n\n  get() {\n    const session = this.session;\n    // already retrieved\n    if (session) return session;\n    // unset\n    if (session === false) return null;\n\n    // cookie session store\n    if (!this.store) this.initFromCookie();\n    return this.session;\n  }\n\n  /**\n   * internal logic of `ctx.session=`\n   * @param {Object} val session object\n   *\n   * @api public\n   */\n\n  set(val) {\n    if (val === null) {\n      this.session = false;\n      return;\n    }\n    if (typeof val === 'object') {\n      // use the original `externalKey` if exists to avoid waste storage\n      this.create(val, this.externalKey);\n      return;\n    }\n    throw new Error('this.session can only be set as null or an object.');\n  }\n\n  /**\n   * init session from external store\n   * will be called in the front of session middleware\n   *\n   * @api public\n   */\n\n  async initFromExternal() {\n    debug('init from external');\n    const ctx = this.ctx;\n    const opts = this.opts;\n\n    const externalKey = ctx.cookies.get(opts.key, opts);\n    debug('get external key from cookie %s', externalKey);\n\n    if (!externalKey) {\n      // create a new `externalKey`\n      this.create();\n      return;\n    }\n\n    const json = await this.store.get(externalKey);\n    if (!this.valid(json)) {\n      // create a new `externalKey`\n      this.create();\n      return;\n    }\n\n    // create with original `externalKey`\n    this.create(json, externalKey);\n    this.prevHash = util.hash(this.session.toJSON());\n  }\n\n  /**\n   * init session from cookie\n   * @api private\n   */\n\n  initFromCookie() {\n    debug('init from cookie');\n    const ctx = this.ctx;\n    const opts = this.opts;\n\n    const cookie = ctx.cookies.get(opts.key, opts);\n    if (!cookie) {\n      this.create();\n      return;\n    }\n\n    let json;\n    debug('parse %s', cookie);\n    try {\n      json = opts.decode(cookie);\n    } catch (err) {\n      // backwards compatibility:\n      // create a new session if parsing fails.\n      // new Buffer(string, 'base64') does not seem to crash\n      // when `string` is not base64-encoded.\n      // but `JSON.parse(string)` will crash.\n      debug('decode %j error: %s', cookie, err);\n      if (!(err instanceof SyntaxError)) {\n        // clean this cookie to ensure next request won't throw again\n        ctx.cookies.set(opts.key, '', opts);\n        // ctx.onerror will unset all headers, and set those specified in err\n        err.headers = {\n          'set-cookie': ctx.response.get('set-cookie'),\n        };\n        throw err;\n      }\n      this.create();\n      return;\n    }\n\n    debug('parsed %j', json);\n\n    if (!this.valid(json)) {\n      this.create();\n      return;\n    }\n\n    // support access `ctx.session` before session middleware\n    this.create(json);\n    this.prevHash = util.hash(this.session.toJSON());\n  }\n\n  /**\n   * verify session(expired or )\n   * @param  {Object} json session object\n   * @return {Boolean} valid\n   * @api private\n   */\n\n  valid(json) {\n    if (!json) return false;\n\n    if (!json._expire || json._expire < Date.now()) {\n      debug('expired session');\n      return false;\n    }\n\n    const valid = this.opts.valid;\n    if (typeof valid === 'function' && !valid(this.ctx, json)) {\n      // valid session value fail, ignore this session\n      debug('invalid session');\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * create a new session and attach to ctx.sess\n   *\n   * @param {Object} [val] session data\n   * @param {String} [externalKey] session external key\n   * @api private\n   */\n\n  create(val, externalKey) {\n    debug('create session with val: %j externalKey: %s', val, externalKey);\n    if (this.opts.store) this.externalKey = externalKey || uid.sync(24);\n    this.session = new Session(this.ctx, val);\n  }\n\n  /**\n   * Commit the session changes or removal.\n   *\n   * @api public\n   */\n\n  async commit() {\n    const session = this.session;\n    const prevHash = this.prevHash;\n    const opts = this.opts;\n    const ctx = this.ctx;\n\n    // not accessed\n    if (undefined === session) return;\n\n    // removed\n    if (session === false) {\n      await this.remove();\n      return;\n    }\n\n    // force save session when `session._requireSave` set\n    if (!session._requireSave) {\n      const json = session.toJSON();\n      // do nothing if new and not populated\n      if (!prevHash && !Object.keys(json).length) return;\n      // do nothing if not changed\n      if (prevHash === util.hash(json)) return;\n    }\n\n    if (typeof opts.beforeSave === 'function') {\n      debug('before save');\n      opts.beforeSave(ctx, session);\n    }\n    await this.save();\n  }\n\n  /**\n   * remove session\n   * @api private\n   */\n\n  async remove() {\n    const opts = this.opts;\n    const ctx = this.ctx;\n    const key = opts.key;\n    const externalKey = this.externalKey;\n\n    if (externalKey) await this.store.destroy(externalKey);\n    ctx.cookies.set(key, '', opts);\n  }\n\n  /**\n   * save session\n   * @api private\n   */\n\n  async save() {\n    const opts = this.opts;\n    const key = opts.key;\n    const externalKey = this.externalKey;\n\n    const maxAge = opts.maxAge || ONE_DAY;\n\n    let json = this.session.toJSON();\n    // set expire for check\n    json._expire = maxAge + Date.now();\n    json._maxAge = maxAge;\n\n    // save to external store\n    if (externalKey) {\n      debug('save %j to external key %s', json, externalKey);\n      await this.store.set(externalKey, json, maxAge);\n      this.ctx.cookies.set(key, externalKey, opts);\n      return;\n    }\n\n    // save to cookie\n    debug('save %j to cookie', json);\n    json = opts.encode(json);\n    debug('save %s', json);\n\n    this.ctx.cookies.set(key, json, opts);\n  }\n}\n\nmodule.exports = ContextSession;\n","/home/travis/build/npmtest/node-npmtest-koa-session/node_modules/koa-session/lib/session.js":"'use strict';\n\n/**\n * Session model.\n */\n\nclass Session {\n  /**\n   * Session constructor\n   * @param {Context} ctx\n   * @param {Object} obj\n   * @api private\n   */\n\n  constructor(ctx, obj) {\n    this._ctx = ctx;\n    if (!obj) {\n      this.isNew = true;\n    } else {\n      for (const k in obj) {\n        // restore maxAge from store\n        if (k === '_maxAge') this._ctx.sessionOptions.maxAge = obj._maxAge;\n        else this[k] = obj[k];\n      }\n    }\n  }\n\n  /**\n   * JSON representation of the session.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  toJSON() {\n    const obj = {};\n\n    Object.keys(this).forEach(key => {\n      if (key === 'isNew') return;\n      if (key[0] === '_') return;\n      obj[key] = this[key];\n    });\n\n    return obj;\n  }\n\n  /**\n   *\n   * alias to `toJSON`\n   * @api public\n   */\n\n  inspect() {\n    return this.toJSON();\n  }\n\n  /**\n   * Return how many values there are in the session object.\n   * Used to see if it's \"populated\".\n   *\n   * @return {Number}\n   * @api public\n   */\n\n  get length() {\n    return Object.keys(this.toJSON()).length;\n  }\n\n  /**\n   * populated flag, which is just a boolean alias of .length.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  get populated() {\n    return !!this.length;\n  }\n\n  /**\n   * get session maxAge\n   *\n   * @return {Number}\n   * @api public\n   */\n\n  get maxAge() {\n    return this._ctx.sessionOptions.maxAge;\n  }\n\n  /**\n   * set session maxAge\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  set maxAge(val) {\n    this._ctx.sessionOptions.maxAge = val;\n    // maxAge changed, must save to cookie and store\n    this._requireSave = true;\n  }\n\n  /**\n   * save this session no matter whether it is populated\n   *\n   * @api public\n   */\n\n  save() {\n    this._requireSave = true;\n  }\n}\n\nmodule.exports = Session;\n","/home/travis/build/npmtest/node-npmtest-koa-session/node_modules/koa-session/lib/util.js":"'use strict';\n\nconst crc = require('crc').crc32;\n\nmodule.exports = {\n\n  /**\n   * Decode the base64 cookie value to an object.\n   *\n   * @param {String} string\n   * @return {Object}\n   * @api private\n   */\n\n  decode(string) {\n    const body = new Buffer(string, 'base64').toString('utf8');\n    const json = JSON.parse(body);\n    return json;\n  },\n\n  /**\n   * Encode an object into a base64-encoded JSON string.\n   *\n   * @param {Object} body\n   * @return {String}\n   * @api private\n   */\n\n  encode(body) {\n    body = JSON.stringify(body);\n    return new Buffer(body).toString('base64');\n  },\n\n  hash(sess) {\n    return crc(JSON.stringify(sess));\n  },\n};\n"}